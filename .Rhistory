datalist = lapply(filenames, function(x){read.table(x,header=T)})
location <- datalist[[1]]$location
chrom <- datalist[[1]]$chrom
start <- datalist[[1]]$start
end <- datalist[[1]]$end
datalist <- lapply(datalist, function(x) x[,c(5,6)])
for(i in 1:6){
names(datalist[[i]]) <- paste(rep(samplenames[i], 2), names(datalist[[i]]), sep = "_")
}
data <- do.call("cbind", datalist)
data <- data.frame(location, chrom, start, end, data)
data
# Reduce(function(x,y) {merge(x,y, all=T)}, datalist)
}
QDNA_cN <- multmerge("/Users/willia01/Google Drive/PhD/HiC_Sep16/SWGS_SLX-10698/files/",
pattern = "*.copyNumber.txt")
HiC_cN <- multmerge("/Users/willia01/Google Drive/PhD/HiC_Sep16/HiC_Babraham_PE_corrected/files",
pattern = "*copyNumber.corrected.txt")
cN_full <- merge(QDNA_cN, HiC_cN, by = c(1:4), suffixes = c("_QDNA", "_HiC"))
cN_full <- mutate(cN_full, centre = 0.5*(start+end))
cN_long <- cN_full  %>%
gather(Sample, CN, -c(location, chrom, start, end, centre)) %>%
separate(Sample, c("sample", "which", "type"), sep="_") %>%
mutate(sample = factor(sample), which=factor(which), type = factor(type))
table(cN_long$chrom)
dif_plot <- function(chr, w){
cN_long %>% filter(chrom==chr, which==w) %>%
spread(type, CN) %>%
mutate(dif = HiC-QDNA) %>%
filter(!is.na(dif)) %>%
ggplot(aes(y=dif, x=centre, colour = sample)) +
geom_point(alpha=.1) +
theme(legend.position = "none")
}
ll <- lapply(levels(cN_long$chrom)[1:9], function(x) dif_plot(x, w="segmented"))
do.call(gridExtra::grid.arrange, ll)
ll <- lapply(c("segmented", "copynumber"), function(x) dif_plot(1, x))
do.call(gridExtra::grid.arrange, ll)
mean_dif_plot <- function(chr, w){
cN_long %>% filter(chrom==chr, which==w) %>%
spread(type, CN) %>%
mutate(dif = HiC-QDNA) %>%
select(chrom, centre, sample, dif) %>%
spread(sample, dif) %>%
mutate(mean_dif = (A002+A005+A006+A007+A012+A019)/5) %>%
select(chrom, centre, mean_dif) %>%
ggplot(aes(y=mean_dif, x=centre)) +
geom_point(alpha=.1, stroke=0) + ylim(c(-.5,.5)) + my_theme() +
ggtitle(paste0("Chr ", chr))
}
mean_dif_plot(chr = 20, w="segmented")
library(tidyverse)
do.call(gridExtra::grid.arrange, ll)
mean_dif_plot(chr = 20, w="segmented")
source('~/.active-rstudio-document')
mean_dif_plot(chr = 20, w="segmented")
mean_dif_plot(chr = 9, w="segmented")
mean_dif_plot(chr = 20, w="segmented")
for(i in 1:22){
print(mean_dif_plot(chr=i, w="segmented"))
}
mean_dif_plot <- function(chr, w){
cN_long %>% filter(chrom==chr, which==w) %>%
spread(type, CN) %>%
mutate(dif = HiC-QDNA) %>%
select(chrom, centre, sample, dif) %>%
spread(sample, dif) %>%
mutate(mean_dif = (A002+A005+A006+A007+A012+A019)/5) %>%
select(chrom, centre, mean_dif) %>%
ggplot(aes(y=mean_dif, x=centre)) +
geom_point(alpha=1, stroke=0) + my_theme() +
ggtitle(paste0("Chr ", chr))
}
ll <- lapply(levels(cN_long$chrom), function(x) mean_dif_plot(x, w="segmented"))
do.call(gridExtra::grid.arrange, ll)
mean_dif_plot <- function(chr, w){
cN_long %>% filter(chrom==chr, which==w) %>%
spread(type, CN) %>%
mutate(dif = HiC-QDNA) %>%
select(chrom, centre, sample, dif) %>%
spread(sample, dif) %>%
mutate(mean_dif = (A002+A005+A006+A007+A012+A019)/5) %>%
select(chrom, centre, mean_dif) %>%
ggplot(aes(y=mean_dif, x=centre)) +
geom_point(alpha=.99, stroke=0) + my_theme() +
ggtitle(paste0("Chr ", chr))
}
ll <- lapply(levels(cN_long$chrom), function(x) mean_dif_plot(x, w="segmented"))
do.call(gridExtra::grid.arrange, ll)
for(i in 1:22){
print(mean_dif_plot(chr=i, w="segmented"))
}
dif_plot <- function(chr, w){
cN_long %>% filter(chrom==chr, which==w) %>%
spread(type, CN) %>%
mutate(dif = HiC-QDNA) %>%
filter(!is.na(dif)) %>%
ggplot(aes(y=dif, x=centre, colour = sample)) +
geom_point(alpha=1, stroke=0)  +
ggtitle(paste0("Chr ", chr)) +
my_theme()
}
dif_plot(chr=7, w="segmented")
dif_plot(chr=9, w="segmented")
shiny::runApp('Desktop/contingency-table-master')
shiny::runApp('Desktop/contingency-table-master')
shiny::runApp('Desktop/contingency-table-master')
shiny::runApp('Desktop/GFR-shiny-app')
shiny::runApp('Desktop/GFR-shiny-app')
shiny::runApp('Desktop/GFR-shiny-app')
shiny::runApp('Desktop/GFR-shiny-app')
shiny::runApp('Desktop/GFR-shiny-app')
shiny::runApp('Desktop/GFR-shiny-app')
shiny::runApp('Desktop/GFR-shiny-app')
shiny::runApp('Desktop/GFR-shiny-app')
library(tidyr)
library(dplyr)
library(tibble)
library(MSnbase)
library(RColorBrewer)
library(ggplot2)
library(kfigr)
library(gridExtra)
library(xtable)
library(limma)
source("hhtp://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("MSnbase")
library(tidyr)
library(dplyr)
library(tibble)
library(MSnbase)
library(RColorBrewer)
library(ggplot2)
library(kfigr)
install.packages("kfigr")
library(kfigr)
library(gridExtra)
library(xtable)
library(limma)
source("plots.R")
source("normalization.R")
getwd()
setwd("smb://cri-share/groups/Core/bioinformatics/public_folders/groups/Markowetz/HoldingA/20161017_Holding_FM_RIME_TMT/analysis20160109")
library(tidyr)
library(dplyr)
library(tibble)
library(MSnbase)
library(RColorBrewer)
library(ggplot2)
library(kfigr)
library(gridExtra)
library(xtable)
library(limma)
source("plots.R")
source("normalization.R")
getwd
Creat_data <- read_excel("Documents/Projects/GFR/Data/Datasets/Addenbrooks/Addenbrooks_new_data/Creatinine_data.xlsx") %>%
rename(Date_GFR = study_date)
GFR_EPIC_need_creat <- read_excel("Documents/Projects/GFR/Data/Datasets/Addenbrooks/Addenbrooks_new_data/GFR_EPIC_need_creat.xlsx",
col_types = c("text", "numeric", "date",
"text", "numeric", "numeric", "date",
"numeric", "numeric", "text", "text",
"text"))
library(tidyverse)
library(readxl)
Creat_data <- read_excel("Documents/Projects/GFR/Data/Datasets/Addenbrooks/Addenbrooks_new_data/Creatinine_data.xlsx") %>%
rename(Date_GFR = study_date)
GFR_EPIC_need_creat <- read_excel("Documents/Projects/GFR/Data/Datasets/Addenbrooks/Addenbrooks_new_data/GFR_EPIC_need_creat.xlsx",
col_types = c("text", "numeric", "date",
"text", "numeric", "numeric", "date",
"numeric", "numeric", "text", "text",
"text"))
GFR_earlyEPIC_need_creat <- read_excel("Documents/Projects/GFR/Data/Datasets/Addenbrooks/Addenbrooks_new_data/GFR_earlyEPIC_need_creat.xlsx",
col_types = c("numeric", "numeric", "skip",
"text", "numeric", "numeric", "date",
"numeric", "numeric", "skip", "skip",
"skip"))
GFR_earlyEPIC <- GFR_earlyEPIC_need_creat %>%
rename(Date_GFR = study_date, MRN = `Coded ID`) %>%
mutate(MRN = MRN/2) %>%
left_join(Creat_data, by = c("MRN", "Date_GFR")) %>%
mutate(Creatinine = as.numeric(gsub("<", 0, Creatinine))) %>%
rename(Sex = `Patient Gender`, Ht = `height cm`, Wt = `weight kg`,
GFR = `GFR ml/min (corrected BM method)`,
norm_GFR = `nGFR ml/min/1.73m2`) %>%
mutate(Creat = Creatinine/88.4)
View(GFR_earlyEPIC)
GFR_EPIC <- GFR_epic_no_creat %>%
rename(Date_GFR = study_date, MRN = `Coded ID`) %>%
mutate(MRN = MRN/2) %>%
left_join(Creat_data, by = c("MRN", "Date_GFR")) %>%
mutate(Creatinine = as.numeric(gsub("<", 0, Creatinine))) %>%
mutate(Age = (Date_GFR - `Date of birth`)/365.25) %>%
rename(Sex = `Patient Gender`, Ht = `height cm`, Wt = `weight kg`,
GFR = `GFR ml/min (corrected BM method)`,
norm_GFR = `nGFR ml/min/1.73m2`,
DOB = `Date of birth`,
Clinician = `Ordering Clinician`,
Dept = `Ordering Dept`) %>%
mutate(Creat = Creatinine/88.4)
View(GFR_EPIC)
GFR_EPIC <- GFR_EPIC_need_creat %>%
rename(Date_GFR = study_date, MRN = `Coded ID`) %>%
mutate(MRN = MRN/2) %>%
left_join(Creat_data, by = c("MRN", "Date_GFR")) %>%
mutate(Creatinine = as.numeric(gsub("<", 0, Creatinine))) %>%
mutate(Age = (Date_GFR - `Date of birth`)/365.25) %>%
rename(Sex = `Patient Gender`, Ht = `height cm`, Wt = `weight kg`,
GFR = `GFR ml/min (corrected BM method)`,
norm_GFR = `nGFR ml/min/1.73m2`,
DOB = `Date of birth`,
Clinician = `Ordering Clinician`,
Dept = `Ordering Dept`) %>%
mutate(Creat = Creatinine/88.4)
GFR_EPIC_need_creat <- read_excel("Documents/Projects/GFR/Data/Datasets/Addenbrooks/Addenbrooks_new_data/GFR_EPIC_need_creat.xlsx",
col_types = c("text", "numeric", "date",
"text", "numeric", "numeric", "date",
"numeric", "numeric", "text", "text",
"text"))
GFR_earlyEPIC_need_creat <- read_excel("Documents/Projects/GFR/Data/Datasets/Addenbrooks/Addenbrooks_new_data/GFR_earlyEPIC_need_creat.xlsx",
col_types = c("numeric", "numeric", "skip",
"text", "numeric", "numeric", "date",
"numeric", "numeric", "skip", "skip",
"skip"))
GFR_earlyEPIC_need_creat
GFR_EPIC_need_creat %>%
rename(Date_GFR = study_date, MRN = `Coded ID`) %>%
mutate(MRN = MRN/2)
GFR_EPIC_need_creat
GFR_EPIC_need_creat %>%
rename(Date_GFR = study_date, MRN = `Coded ID`)
GFR_EPIC_need_creat <- read_excel("Documents/Projects/GFR/Data/Datasets/Addenbrooks/Addenbrooks_new_data/GFR_EPIC_need_creat.xlsx",
col_types = c("numeric", "numeric", "date",
"text", "numeric", "numeric", "date",
"numeric", "numeric", "text", "text",
"text"))
GFR_EPIC <- GFR_EPIC_need_creat %>%
rename(Date_GFR = study_date, MRN = `Coded ID`) %>%
mutate(MRN = MRN/2) %>%
left_join(Creat_data, by = c("MRN", "Date_GFR")) %>%
mutate(Creatinine = as.numeric(gsub("<", 0, Creatinine))) %>%
mutate(Age = (Date_GFR - `Date of birth`)/365.25) %>%
rename(Sex = `Patient Gender`, Ht = `height cm`, Wt = `weight kg`,
GFR = `GFR ml/min (corrected BM method)`,
norm_GFR = `nGFR ml/min/1.73m2`,
DOB = `Date of birth`,
Clinician = `Ordering Clinician`,
Dept = `Ordering Dept`) %>%
mutate(Creat = Creatinine/88.4)
View(GFR_EPIC)
GFR_EPIC %>%
select(`Ordering Dept`, `Ordering Clinician`) %>%
arrange(`Ordering Dept`) %>%
group_by(`Ordering Dept`, `Ordering Clinician`) %>%
slice(1)
GFR_EPIC %>%
group_by(Dept, Clinician) %>%
summarise(number = n())
GFR_EPIC %>%
group_by(Dept, Clinician) %>%
summarise(number = n()) %>%
write.csv(file = "Documents/Projects/GFR/Data/Datasets/Addenbrooks/Addenbrooks_new_data/Clinitian_Dept_list.csv",
row.names = F)
GFR_EPIC %>%
left_join(Clinitian_Dept_list_filled)
Clinitian_Dept_list_filled <-
read_csv("Documents/Projects/GFR/Data/Datasets/Addenbrooks/Addenbrooks_new_data/Clinitian_Dept_list_filled.csv",
col_types = cols(number = col_skip()))
GFR_EPIC %>%
left_join(Clinitian_Dept_list_filled)
GFR_EPIC %>%
left_join(Clinitian_Dept_list_filled) %>%
View()
GFR_EPIC %>%
left_join(Clinitian_Dept_list_filled) %>%
filter(Type == "peads")
GFR_EPIC %>%
left_join(Clinitian_Dept_list_filled) %>%
filter(Type == "paeds")
GFR_EPIC %>%
left_join(Clinitian_Dept_list_filled) %>%
filter(Type == "paeds") %>%
pull(Age) %>%
summary()
GFR_EPIC %>%
left_join(Clinitian_Dept_list_filled) %>%
filter(Type == "paeds") %>%
pull(Age) %>%
hist()
GFR_EPIC <- GFR_EPIC_need_creat %>%
rename(Date_GFR = study_date, MRN = `Coded ID`) %>%
mutate(MRN = MRN/2) %>%
left_join(Creat_data, by = c("MRN", "Date_GFR")) %>%
mutate(Creatinine = as.numeric(gsub("<", 0, Creatinine))) %>%
mutate(Age = as.numeric(Date_GFR - `Date of birth`)/365.25) %>%
rename(Sex = `Patient Gender`, Ht = `height cm`, Wt = `weight kg`,
GFR = `GFR ml/min (corrected BM method)`,
norm_GFR = `nGFR ml/min/1.73m2`,
DOB = `Date of birth`,
Clinician = `Ordering Clinician`,
Dept = `Ordering Dept`) %>%
mutate(Creat = Creatinine/88.4)
View(GFR_EPIC)
GFR_EPIC %>%
left_join(Clinitian_Dept_list_filled) %>%
filter(Type == "paeds") %>%
pull(Age) %>%
hist()
GFR_EPIC %>%
left_join(Clinitian_Dept_list_filled) %>%
filter(Type == "paeds") %>%
pull(Age) %>%
max()
GFR_EPIC %>%
left_join(Clinitian_Dept_list_filled) %>%
write.csv(file = "Documents/Projects/GFR/Data/Datasets/Addenbrooks/Addenbrooks_new_data/Addenbrookes_GFR_EPIC.csv",
row.names = F)
GFR_EPIC %>%
left_join(Clinitian_Dept_list_filled) %>%
arrange(Clinitian, Dept) %>%
write.csv(file = "Documents/Projects/GFR/Data/Datasets/Addenbrooks/Addenbrooks_new_data/Addenbrookes_GFR_EPIC.csv",
row.names = F)
GFR_EPIC
GFR_EPIC %>%
left_join(Clinitian_Dept_list_filled) %>%
arrange(Clinician, Dept) %>%
write.csv(file = "Documents/Projects/GFR/Data/Datasets/Addenbrooks/Addenbrooks_new_data/Addenbrookes_GFR_EPIC.csv",
row.names = F)
GFR_EPIC %>%
left_join(Clinitian_Dept_list_filled) %>%
arrange(Cancer_NC, check, Clinician, Dept) %>%
write.csv(file = "Documents/Projects/GFR/Data/Datasets/Addenbrooks/Addenbrooks_new_data/Addenbrookes_GFR_EPIC.csv",
row.names = F)
GFR_EPIC %>%
left_join(Clinitian_Dept_list_filled) %>%
arrange(Cancer_NC, Check, Clinician, Dept) %>%
write.csv(file = "Documents/Projects/GFR/Data/Datasets/Addenbrooks/Addenbrooks_new_data/Addenbrookes_GFR_EPIC.csv",
row.names = F)
GFR_EPIC %>%
left_join(Clinitian_Dept_list_filled) %>%
mutate(MRN = MRN*2) %>%
arrange(Cancer_NC, Check, Clinician, Dept) %>%
write.csv(file = "Documents/Projects/GFR/Data/Datasets/Addenbrooks/Addenbrooks_new_data/Addenbrookes_GFR_EPIC.csv",
row.names = F)
library(tidyverse)
library(stringr)
Data_needing_extraction <-
read_csv("Documents/Projects/GFR/Data/Datasets/Addenbrooks/Addenbrooks_new_data/Data_needing_extraction.csv") %>%
mutate(MRN = MRN/2)
string_data <- strsplit(Data_needing_extraction$Info, split = "\\r")
get_data <- function(x){
len = length(x)
ht = x[tail(grep("cm", x), n=1)]
wt = x[tail(grep("Kg", x), n=1)]
corrected = x[tail(grep("Corrected \\(BM Method\\) GFR", x), n=1)]
norm = x[tail(grep("Normalised GFR", x), n=1)]
hosnum = x[tail(grep("\\d{5,}", x), n=1)]
date = x[tail(grep("\\d{2}\\/\\d{2}\\/\\d{4}", x),n=1)]
comment_index = tail(grep("Comment", x), n=1)
if(length(comment_index) == 1){
comment = paste(x[comment_index:len], collapse = " ")
} else {
comment = NA
}
l = list(ht, wt, corrected, norm, hosnum, date, comment)
l = lapply(l, function(x) if(length(x) == 0){NA} else{x})
df = data.frame(Ht = l[[1]], Wt = l[[2]], Corrected_GFR = l[[3]],
Normalised_GFR = l[[4]], Hosnum = l[[5]], Date_GFR_2 = l[[6]],
Comment = l[[7]])
return(df)
}
extracted_data <- do.call(rbind, lapply(string_data, get_data))
extracted_data <- extracted_data %>%
mutate(Ht = str_extract(Ht, "[0-9|\\.]+")) %>%
mutate(Wt = str_extract(Wt, "[0-9|\\.]+")) %>%
mutate(GFR_corrected = str_extract(Corrected_GFR, "[0-9|\\.]+")) %>%
mutate(GFR_corrected_error = str_extract_all(Corrected_GFR, "[0-9|\\.]+", simplify = T)[,2]) %>%
mutate(GFR_corrected_expected = str_extract_all(Corrected_GFR, "[0-9|\\.]+", simplify = T)[,3]) %>%
mutate(GFR_norm = str_extract(Normalised_GFR, "[0-9|\\.]+")) %>%
mutate(GFR_norm_error = str_extract_all(Normalised_GFR, "[0-9|\\.]+", simplify = T)[,2]) %>%
mutate(GFR_norm_expected = str_extract_all(Normalised_GFR, "[0-9|\\.]+", simplify = T)[,5]) %>%
select(-Corrected_GFR, -Normalised_GFR) %>%
bind_cols(select(Data_needing_extraction, -Info))
extracted_data <- extracted_data[,c(12, 13, 14, 1, 2, 15, 6, 9, 7, 10, 8, 11, 3, 5)]
extracted_data %>% pul(MRN)
extracted_data %>% pull(MRN)
extracted_data %>% pull(MRN) %>% write.csv("Pre_EPIC_hosnum.csv", row.names = F)
getwd()
shiny::runApp('Documents/Projects/GFR/eGFR-shiny-app')
shiny::runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
predict.lm()
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
shiny::runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
sidebarPanel(width = 5,
fileInput('data_file', 'Upload file',
accept = c('text/csv','text/comma-separated-values,text/plain','.csv','.xlsx')),
radioButtons("sep", "Separator",
choices = c(Semicolon = ";",
Comma = ",",
Tab = "\t"),
selected = ",", inline = T),
p(HTML("<b>Required column names (units):</b><br/> Creatinine (mg/dL)<br/>
Gender (M or F)<br/>  Height (cm)<br/>  Weight (Kg)<br/>  CreatinineType (IDMS or Non_IDMS)")),
textInputRow_one("Confidence level for prediction interval:", "Conf", "%", "95"),
br(),
br(),
downloadButton("downloadData", "Download output data"),
br(),
br(),
tags$strong("Example input data:"),
div(tableOutput("example_input"), style = "font-size:60%")
)
textInputRow_one<-function (text, inputId, label, value = "", ...)
{
div(style="display:inline-block",
tags$b(text),
tags$input(id = inputId, type = "number", value = value, style="width: 4em", ...),
label)
}
textInputRow_two<- function (text, inputId1, inputId2 , label1, label2,
value1 = "", value2 = "", ...)
{
div(style="display:inline-block",
tags$b(text),
tags$input(id = inputId1, type = "number", value = value1, style="width: 4em", ...),
label1,
tags$input(id = inputId2, type = "number", value = value2, style="width: 4em", ...),
label2)
}
sidebarPanel(width = 5,
fileInput('data_file', 'Upload file',
accept = c('text/csv','text/comma-separated-values,text/plain','.csv','.xlsx')),
radioButtons("sep", "Separator",
choices = c(Semicolon = ";",
Comma = ",",
Tab = "\t"),
selected = ",", inline = T),
p(HTML("<b>Required column names (units):</b><br/> Creatinine (mg/dL)<br/>
Gender (M or F)<br/>  Height (cm)<br/>  Weight (Kg)<br/>  CreatinineType (IDMS or Non_IDMS)")),
textInputRow_one("Confidence level for prediction interval:", "Conf", "%", "95"),
br(),
br(),
downloadButton("downloadData", "Download output data"),
br(),
br(),
tags$strong("Example input data:"),
div(tableOutput("example_input"), style = "font-size:60%")
)
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
shiny::runApp('Downloads/48dc47f3ff436aba4b19-2d9ad6af13be17a939464d447a844137a2442ca1')
runApp('Downloads/48dc47f3ff436aba4b19-2d9ad6af13be17a939464d447a844137a2442ca1')
shiny::runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
runApp('Documents/Projects/GFR/eGFR-shiny-app')
